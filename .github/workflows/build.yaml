name: Build OpenWRT Package
on: [push]

jobs:
    build:
        name: Prepare and build our package
        runs-on: ubuntu-latest

        steps:
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Install Compose
              uses: ndeloof/install-compose-action@v0.0.1
              with:
                legacy: true    # will also install in PATH as `docker-compose`

            - name: Checkout
              uses: actions/checkout@v2

            - name: Build target images
              run: |
                mkdir work
                chmod 777 work
                docker compose build
                docker compose up

            - name: Push built file to repo
              uses: wlixcc/SFTP-Deploy-Action@v1.2.4
              with:
                  username: ${{ secrets.SSH_REPO_USER }}
                  server: ${{ secrets.SSH_REPO_HOST }} 
                  port: ${{ secrets.SSH_REPO_PORT }}
                  ssh_private_key: ${{ secrets.SSH_REPO_KEY }} 
                  local_path: './work/*'
                  remote_path: '/packages'
                  sftpArgs: '-o ConnectTimeout=5'

            - name: TAR output
              run: tar -cvf work.tar work

            - name: Upload artifacts
              uses: actions/upload-artifact@v2
              with:
                name: work
                path: work.tar

    release:
          name: Make a release
          runs-on: ubuntu-latest
          needs: build

          steps:
            - name: Set env for SHA
              run: echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV

            - name: Download the image artifacts
              uses: actions/download-artifact@v2
              with:
                name: work

            - name: Extract the image artifacts
              run: tar xf work.tar

            - name: Get the current date
              run: echo "NOW=$(date +%F)" >> $GITHUB_ENV

            - name: Create a release
              uses: "marvinpinto/action-automatic-releases@latest"
              with:
                repo_token: "${{ secrets.GITHUB_TOKEN }}"
                prerelease: false
                title: "PrivateRouter tgwireguard SHA ${{ env.GITHUB_SHA_SHORT }}"
                automatic_release_tag: "PrivateRouter-TGWireGuard-${{ env.GITHUB_SHA_SHORT }}"
                files: work/*
